rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isValidUser(data) {
      return data.keys().hasAll(['firstName', 'lastName', 'email', 'phone', 'address', 'accountType', 'createdAt']) &&
             data.firstName is string &&
             data.lastName is string &&
             data.email is string &&
             data.phone is string &&
             data.address is string &&
             data.accountType in ['buyer', 'seller'] &&
             data.createdAt is string;
    }

    function isValidProduct(data) {
      return data.keys().hasAll(['name', 'description', 'price', 'imageUrl', 'sellerId', 'stock', 'pincode', 'createdAt']) &&
             data.name is string &&
             data.description is string &&
             data.price is number &&
             data.imageUrl is string &&
             data.sellerId is string &&
             data.stock is number &&
             data.pincode is string &&
             data.createdAt is string;
    }

    function isValidOrder(data) {
      return data.keys().hasAll(['userId', 'buyerName', 'buyerEmail', 'items', 'total', 'status', 'deliveryAddress', 'pincode', 'paymentMethod', 'sellerId', 'createdAt']) &&
             data.userId is string &&
             data.buyerName is string &&
             data.buyerEmail is string &&
             data.items is list &&
             data.total is number &&
             data.status in ['pending', 'processing', 'shipped', 'delivered', 'cancelled'] &&
             data.deliveryAddress is string &&
             data.pincode is string &&
             data.paymentMethod in ['cod', 'payu'] &&
             data.sellerId is string &&
             data.createdAt is string;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidUser(request.resource.data);
      allow update: if isAuthenticated() && 
                      isOwner(userId) && 
                      isValidUser(request.resource.data);
      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Products collection
    match /products/{productId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
                      request.resource.data.sellerId == request.auth.uid &&
                      isValidProduct(request.resource.data);
      allow update, delete: if isAuthenticated() && 
                             resource.data.sellerId == request.auth.uid;
    }

    // Orders collection
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || 
                     resource.data.sellerId == request.auth.uid);
      allow create: if isAuthenticated() && 
                      request.resource.data.userId == request.auth.uid &&
                      isValidOrder(request.resource.data);
      allow update: if isAuthenticated() && 
                      (resource.data.userId == request.auth.uid || 
                       resource.data.sellerId == request.auth.uid) &&
                      (request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['status']));
    }
  }
}